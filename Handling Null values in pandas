#Null values, often represented as NaN in pandas, are missing or undefined data points in a dataset.
/*
There are two types of dataset
1.Numerical Dataset: Numerical datasets consist of quantitative data that can be measured and expressed as numerical values. Examples include age, height, temperature, and income.

2.Categorical Dataset: Categorical datasets contain qualitative data that represents categories or groups. Examples include gender, color, country, etc.
*/

--isnull()This method returns a DataFrame of the same shape as the input, where each element is True if it's a null value and False otherwise. 
--info()The info() method provides a concise summary of the DataFrame, including the count of non-null values for each column.
--fillna(): Fills null values with a specified value or method.


#Example
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

data = {
    'A': [1, 2, np.nan, 4, 5],
    'B': [5, np.nan, np.nan, 8, 10],
    'C': [10, 20, 30, np.nan, 50]
}
df = pd.DataFrame(data)
print("Sample DataFrame:")
print(df)


plt.figure(figsize=(10, 6))
sns.heatmap(df.isnull(), cbar=False, cmap='viridis')
plt.title('Heatmap of Null Values')
plt.show()


df_dropna = df.dropna()
print("DataFrame after dropping rows with null values:")
print(df_dropna)

df_fillna = df.fillna(0)
print("DataFrame after filling null values with 0:")
print(df_fillna)


df_fillna_mean = df.apply(lambda x: x.fillna(x.mean()), axis=0)
print("DataFrame after filling null values with column mean:")
print(df_fillna_mean)

df_ffill = df.ffill()
print("DataFrame after forward fill:")
print(df_ffill)

df_bfill = df.bfill()
print("DataFrame after backward fill:")
print(df_bfill)

plt.figure(figsize=(10, 6))
sns.heatmap(df_fillna_mean.isnull(), cbar=False, cmap='viridis')
plt.title('Heatmap after Handling Null Values')
plt.show()

#Example
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

data = {
    'A': [1, 2, np.nan, 4, 5],
    'B': [5, np.nan, np.nan, 8, 10],
    'C': [10, 20, 30, np.nan, 50],
    'D': [np.nan, 40, 60, 80, 100]
}
df = pd.DataFrame(data)
print("Sample DataFrame:")
print(df)

fig, axes = plt.subplots(2, 2, figsize=(15, 10))

sns.heatmap(df.isnull(), cbar=False, cmap='viridis', ax=axes[0, 0])
axes[0, 0].set_title('Heatmap of Null Values')

null_counts = df.isnull().sum()
sns.barplot(x=null_counts.index, y=null_counts.values, ax=axes[0, 1])
axes[0, 1].set_title('Null Values Count per Column')

msno.matrix(df, ax=axes[1, 0], sparkline=False)
axes[1, 0].set_title('Missing Values Matrix')

msno.dendrogram(df, ax=axes[1, 1])
axes[1, 1].set_title('Missing Values Dendrogram')

plt.tight_layout()
plt.show()


-- dropna() method in pandas removes rows or columns with null values from a DataFrame.

#Interpolation: helps us complete missing data, maintain smoothness in our datasets, and make educated guesses about what values might be between our known points.

/*
Types of Interpolation Methods:
Linear Interpolation: Connects dots with straight lines.
Polynomial Interpolation: Fits curves through dots.
Spline Interpolation: Uses smooth curves to fill gaps.
Nearest Neighbor Interpolation: Uses the value of the nearest dot to fill gaps.
*/

--"End of distribution" imputation is a method used to handle missing data where missing values are replaced with a value that lies at the end of the distribution of the variable.


